package happy_birthday;


import fi.iki.elonen.NanoHTTPD;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;

public class ImageServer extends NanoHTTPD {

    public ImageServer() throws IOException {
        super(8087);
        start(NanoHTTPD.SOCKET_READ_TIMEOUT, false);
        System.out.println("Server started, you can access it at http://localhost:8087");
    }

    @Override
    public Response serve(IHTTPSession session) {
    	
        String uri = session.getUri();
        if (uri.equals("/")) {
            return newFixedLengthResponse("<html><body><h1>\"HAPPY BIRTHDAY ANNA.....LOVE YOU LOT.....\"</h1>" +
                    "<img src=\"/images/image1.jpg\" alt=\"Image 1\" />" +
                    "<img src=\"/images/image2.jpg\" alt=\"Image 2\" />" +
                    "<img src=\"/images/image3.jpg\" alt=\"Image 3\" />" +
                    "<img src=\"/images/image4.jpg\" alt=\"Image 4\" />" +
                    "<img src=\"/images/image5.jpg\" alt=\"Image 5\" />" +
                    "</body></html>");
        } else if (uri.startsWith("/images/")) {
            return serveFile(uri);
        } else {
            return newFixedLengthResponse(Response.Status.NOT_FOUND, NanoHTTPD.MIME_PLAINTEXT, "Not Found");
        }
    }

    private Response serveFile(String uri) {
        String filePath = "C:/JAVA FULL STACK/happy_birthday/images" + uri.replace("/images", "");
        try {
            File file = new File(filePath);
            FileInputStream fis = new FileInputStream(file);
            String mimeType = getMimeType(filePath); // Method to determine MIME type based on file extension
            return newChunkedResponse(Response.Status.OK, mimeType, fis);
        } catch (Exception e) {
            e.printStackTrace();
            return newFixedLengthResponse(Response.Status.INTERNAL_ERROR, NanoHTTPD.MIME_PLAINTEXT, "Internal Server Error");
        }
    }

    private String getMimeType(String filePath) {
        if (filePath.endsWith(".jpg") || filePath.endsWith(".jpeg")) {
            return "image/jpeg";
        } else if (filePath.endsWith(".png")) {
            return "image/png";
        } else if (filePath.endsWith(".gif")) {
            return "image/gif";
        } else {
            return NanoHTTPD.MIME_PLAINTEXT; // Default MIME type
        }
    }

    public static void main(String[] args) {
        try {
            new ImageServer();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
